{"ast":null,"code":"import { _ as __awaiter, D as DEFAULT_ALCHEMY_API_KEY, C as CustomNetworks, a as DEFAULT_NETWORK, N as Network, I as IS_BROWSER, V as VERSION, l as logWarn, d as deepCopy, E as EthersNetwork, g as getAlchemyHttpUrl, b as getAlchemyWsUrl } from './index-21328762.js';\nimport { getNetwork } from '@ethersproject/networks';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { fetchJson } from '@ethersproject/web';\nimport './api/utils';\nimport '@ethersproject/bignumber';\nimport 'axios';\nimport '@ethersproject/abstract-provider';\nimport '@ethersproject/wallet';\nimport '@ethersproject/contracts';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */\nclass RequestBatcher {\n  constructor(sendBatchFn) {\n    let maxBatchSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MAX_REQUEST_BATCH_SIZE;\n    this.sendBatchFn = sendBatchFn;\n    this.maxBatchSize = maxBatchSize;\n    /**\r\n     * Array of enqueued requests along with the constructed promise handlers for\r\n     * each request.\r\n     */\n    this.pendingBatch = [];\n  }\n  /**\r\n   * Enqueues the provided request. The batch is immediately sent if the maximum\r\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n   * is sent after 10ms.\r\n   *\r\n   * Returns a promise that resolves with the result of the request.\r\n   */\n  enqueueRequest(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const inflightRequest = {\n        request,\n        resolve: undefined,\n        reject: undefined\n      };\n      const promise = new Promise((resolve, reject) => {\n        inflightRequest.resolve = resolve;\n        inflightRequest.reject = reject;\n      });\n      this.pendingBatch.push(inflightRequest);\n      if (this.pendingBatch.length === this.maxBatchSize) {\n        // Send batch immediately if we are at the maximum batch size.\n        void this.sendBatchRequest();\n      } else if (!this.pendingBatchTimer) {\n        // Schedule batch for next event loop + short duration\n        this.pendingBatchTimer = setTimeout(() => this.sendBatchRequest(), DEFAULT_REQUEST_BATCH_DELAY_MS);\n      }\n      return promise;\n    });\n  }\n  /**\r\n   * Sends the currently queued batches and resets the batch and timer. Processes\r\n   * the batched response results back to the original promises.\r\n   */\n  sendBatchRequest() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the current batch and clear it, so new requests\n      // go into the next batch\n      const batch = this.pendingBatch;\n      this.pendingBatch = [];\n      if (this.pendingBatchTimer) {\n        clearTimeout(this.pendingBatchTimer);\n        this.pendingBatchTimer = undefined;\n      }\n      // Get the request as an array of requests\n      const request = batch.map(inflight => inflight.request);\n      return this.sendBatchFn(request).then(result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            error.code = payload.error.code;\n            error.data = payload.error.data;\n            inflightRequest.reject(error);\n          } else {\n            inflightRequest.resolve(payload.result);\n          }\n        });\n      }, error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject(error);\n        });\n      });\n    });\n  }\n}\n\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */\nclass AlchemyProvider extends JsonRpcProvider {\n  /** @internal */\n  constructor(config) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, 'http');\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n    connection.throttleLimit = config.maxRetries;\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n    // TODO: support individual headers when calling batch\n    const batcherConnection = Object.assign({}, this.connection);\n    batcherConnection.headers['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = requests => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n  /**\r\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n   * ethers.js. Returns the API key for an Alchemy provider.\r\n   *\r\n   * @internal\r\n   * @override\r\n   */\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\n    }\n    return apiKey;\n  }\n  /**\r\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n   *\r\n   * This override allows the SDK to set the provider's network to values not\r\n   * yet supported by ethers.js.\r\n   *\r\n   * @internal\r\n   * @override\r\n   */\n  static getNetwork(network) {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetwork(network);\n  }\n  /**\r\n   * Converts the `Networkish` input to the network enum used by Alchemy.\r\n   *\r\n   * @internal\r\n   */\n  static getAlchemyNetwork(network) {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n    if (typeof network === 'number') {\n      throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\n    }\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network);\n    if (!isValidNetwork) {\n      throw new Error(`Invalid network '${network}' provided. Network must be one of: ` + `${Object.values(Network).join(', ')}.`);\n    }\n    return network;\n  }\n  /**\r\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n   * the correct URLs for Alchemy.\r\n   *\r\n   * @internal\r\n   */\n  static getAlchemyConnectionInfo(network, apiKey, type) {\n    const url = type === 'http' ? getAlchemyHttpUrl(network, apiKey) : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER ? {\n        'Alchemy-Ethers-Sdk-Version': VERSION\n      } : {\n        'Alchemy-Ethers-Sdk-Version': VERSION,\n        'Accept-Encoding': 'gzip'\n      },\n      allowGzip: true,\n      url\n    };\n  }\n  /**\r\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n   * method is called when calling methods on the parent class `BaseProvider`.\r\n   *\r\n   * @override\r\n   */\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n        if (!network) {\n          throw new Error('No network detected');\n        }\n      }\n      return network;\n    });\n  }\n  _startPending() {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n  /**\r\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n   * current api key is the default key.\r\n   *\r\n   * @override\r\n   */\n  isCommunityResource() {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n  /**\r\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n   * logic for sending requests to Alchemy.\r\n   *\r\n   * @param method The method name to use for the request.\r\n   * @param params The parameters to use for the request.\r\n   * @override\r\n   * @public\r\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method, params) {\n    return this._send(method, params, 'send');\n  }\n  /**\r\n   * DO NOT MODIFY.\r\n   *\r\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n   *\r\n   * This method is copied over directly in order to implement custom headers\r\n   *\r\n   * @internal\r\n   */\n  _send(method, params, methodName) {\n    let forceBatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n    // START MODIFIED CODE\n    const connection = Object.assign({}, this.connection);\n    connection.headers['Alchemy-Ethers-Sdk-Method'] = methodName;\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request);\n    }\n    // END MODIFIED CODE\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit('debug', {\n        action: 'response',\n        request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit('debug', {\n        action: 'response',\n        error,\n        request,\n        provider: this\n      });\n      throw error;\n    });\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n    return result;\n  }\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */\nfunction getResult(payload) {\n  if (payload.error) {\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nexport { AlchemyProvider };","map":{"version":3,"mappings":"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","names":["DEFAULT_MAX_REQUEST_BATCH_SIZE","DEFAULT_REQUEST_BATCH_DELAY_MS","RequestBatcher","constructor","maxBatchSize","sendBatchFn","enqueueRequest","request","inflightRequest","resolve","undefined","reject","promise","Promise","pendingBatch","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","Object","headers","requests","fetchJson","JSON","stringify","batcher","DEFAULT_ALCHEMY_API_KEY","getNetwork","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","isValidNetwork","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","detectNetwork","_super","_startPending","logWarn","isCommunityResource","send","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response"],"sources":["/Users/youssefsrondy/Desktop/web3/week3_project/node_modules/alchemy-sdk/src/internal/request-batcher.ts","/Users/youssefsrondy/Desktop/web3/week3_project/node_modules/alchemy-sdk/src/api/alchemy-provider.ts"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}