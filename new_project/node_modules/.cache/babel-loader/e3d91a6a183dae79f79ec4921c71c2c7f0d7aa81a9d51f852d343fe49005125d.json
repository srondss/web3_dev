{"ast":null,"code":"var _jsxFileName = \"/Users/youssefsrondy/Desktop/web3/week3_project/src/App.js\",\n  _s = $RefreshSig$();\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET\n};\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\nfunction App() {\n  _s();\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockInfo, setBlockInfo] = useState(\"\");\n  useEffect(() => {\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    async function getBlockInfo() {\n      setBlockInfo(await alchemy.core.getBlock(blockNumber));\n    }\n    getBlockNumber();\n    getBlockInfo();\n    console.log(blockInfo.transactions);\n  }, []);\n  function getTime(timestamp) {\n    let unix_timestamp = timestamp;\n    // Create a new JavaScript Date object based on the timestamp\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n    var date = new Date(unix_timestamp * 1000);\n    // Hours part from the timestamp\n    var hours = date.getHours();\n    // Minutes part from the timestamp\n    var minutes = \"0\" + date.getMinutes();\n    // Seconds part from the timestamp\n    var seconds = \"0\" + date.getSeconds();\n    // Will display time in 10:30:23 format\n    var formattedTime = hours + \":\" + minutes + \":\" + seconds.slice(1, 3);\n    return formattedTime;\n  }\n  let time = getTime(blockInfo.timestamp);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Block Number: \", blockNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Block Timestamp: \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Amount of Transactions: \", blockInfo.transactions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Transaction Root: \", blockInfo.transactionsRoot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"djnh2GO7RRwzx7msHuvkkgdfOUA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alchemy","Network","useEffect","useState","settings","apiKey","process","env","REACT_APP_ALCHEMY_API_KEY","network","ETH_MAINNET","alchemy","App","blockNumber","setBlockNumber","blockInfo","setBlockInfo","getBlockNumber","core","getBlockInfo","getBlock","console","log","transactions","getTime","timestamp","unix_timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","slice","time","length","transactionsRoot"],"sources":["/Users/youssefsrondy/Desktop/web3/week3_project/src/App.js"],"sourcesContent":["import { Alchemy, Network } from \"alchemy-sdk\";\nimport { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET,\n};\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\n\nfunction App() {\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockInfo, setBlockInfo] = useState(\"\");\n\n  useEffect(() => {\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n\n    async function getBlockInfo() {\n      setBlockInfo(await alchemy.core.getBlock(blockNumber));\n    }\n\n    getBlockNumber();\n    getBlockInfo();\n\n    console.log(blockInfo.transactions);\n  }, []);\n\n  function getTime(timestamp) {\n    let unix_timestamp = timestamp;\n    // Create a new JavaScript Date object based on the timestamp\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n    var date = new Date(unix_timestamp * 1000);\n    // Hours part from the timestamp\n    var hours = date.getHours();\n    // Minutes part from the timestamp\n    var minutes = \"0\" + date.getMinutes();\n    // Seconds part from the timestamp\n    var seconds = \"0\" + date.getSeconds();\n    // Will display time in 10:30:23 format\n    var formattedTime = hours + \":\" + minutes + \":\" + seconds.slice(1, 3);\n    return formattedTime;\n  }\n\n  let time = getTime(blockInfo.timestamp);\n\n  return (\n    <div className=\"App\">\n      <div>Block Number: {blockNumber}</div>\n      <div>Block Timestamp: {time}</div>\n      <div>Amount of Transactions: {blockInfo.transactions.length}</div>\n      <div>Transaction Root: {blockInfo.transactionsRoot}</div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAC9C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,WAAW;;AAElB;AACA;AACA;AAAA;AACA,MAAMC,QAAQ,GAAG;EACfC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAC7CC,OAAO,EAAER,OAAO,CAACS;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,IAAIX,OAAO,CAACI,QAAQ,CAAC;AAErC,SAASQ,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,EAAE;EAChD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,eAAee,cAAc,GAAG;MAC9BH,cAAc,CAAC,MAAMH,OAAO,CAACO,IAAI,CAACD,cAAc,EAAE,CAAC;IACrD;IAEA,eAAeE,YAAY,GAAG;MAC5BH,YAAY,CAAC,MAAML,OAAO,CAACO,IAAI,CAACE,QAAQ,CAACP,WAAW,CAAC,CAAC;IACxD;IAEAI,cAAc,EAAE;IAChBE,YAAY,EAAE;IAEdE,OAAO,CAACC,GAAG,CAACP,SAAS,CAACQ,YAAY,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,SAASC,OAAO,CAACC,SAAS,EAAE;IAC1B,IAAIC,cAAc,GAAGD,SAAS;IAC9B;IACA;IACA,IAAIE,IAAI,GAAG,IAAIC,IAAI,CAACF,cAAc,GAAG,IAAI,CAAC;IAC1C;IACA,IAAIG,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE;IAC3B;IACA,IAAIC,OAAO,GAAG,GAAG,GAAGJ,IAAI,CAACK,UAAU,EAAE;IACrC;IACA,IAAIC,OAAO,GAAG,GAAG,GAAGN,IAAI,CAACO,UAAU,EAAE;IACrC;IACA,IAAIC,aAAa,GAAGN,KAAK,GAAG,GAAG,GAAGE,OAAO,GAAG,GAAG,GAAGE,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACrE,OAAOD,aAAa;EACtB;EAEA,IAAIE,IAAI,GAAGb,OAAO,CAACT,SAAS,CAACU,SAAS,CAAC;EAEvC,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,6BAAoBZ,WAAW;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eACtC;MAAA,gCAAuBwB,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eAClC;MAAA,uCAA8BtB,SAAS,CAACQ,YAAY,CAACe,MAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eAClE;MAAA,iCAAwBvB,SAAS,CAACwB,gBAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACrD;AAEV;AAAC,GA7CQ3B,GAAG;AAAA,KAAHA,GAAG;AA+CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}